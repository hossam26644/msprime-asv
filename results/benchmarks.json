{
    "benchmarks.DTWF.peakmem_human_chr22": {
        "code": "class DTWF:\n    def peakmem_human_chr22(self):\n        self._run_human_chr22()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.DTWF.peakmem_human_chr22",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "f848688127844489b5870c5598d06fc61bdb8c1a31b2c71741fb842ce4869124"
    },
    "benchmarks.DTWF.peakmem_large_population_size": {
        "code": "class DTWF:\n    def peakmem_large_population_size(self):\n        self._run_large_population_size()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.DTWF.peakmem_large_population_size",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "1c54016f27b74e5d827e0cf71dee2587b99237d50e0c3aa5bfb1e9a54bedf712"
    },
    "benchmarks.DTWF.peakmem_long_sequence_length": {
        "code": "class DTWF:\n    def peakmem_long_sequence_length(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.DTWF.peakmem_long_sequence_length",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "72b4498a433ac926a303683be39aa07c206b25c22caa613088af6cbe51544ce9"
    },
    "benchmarks.DTWF.peakmem_many_replicates": {
        "code": "class DTWF:\n    def peakmem_many_replicates(self):\n        self._run_many_replicates()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.DTWF.peakmem_many_replicates",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "8d591fe1a84bfd039f312aef953605c494b28ed3e3b28bd41773b5a6bbab8e13"
    },
    "benchmarks.DTWF.time_human_chr22": {
        "code": "class DTWF:\n    def time_human_chr22(self):\n        self._run_human_chr22()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.DTWF.time_human_chr22",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "d016729b716d45e5a6cc8608ae18480b4f3d6192cc29f39ad8e06222786408c6",
        "warmup_time": 0
    },
    "benchmarks.DTWF.time_large_population_size": {
        "code": "class DTWF:\n    def time_large_population_size(self):\n        self._run_large_population_size()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.DTWF.time_large_population_size",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "5393d907eb6d9700c18c23789395c3a6a8aecf236b49983e2d955dccc6f793a3",
        "warmup_time": 0
    },
    "benchmarks.DTWF.time_long_sequence_length": {
        "code": "class DTWF:\n    def time_long_sequence_length(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.DTWF.time_long_sequence_length",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "89860f21a2ad81e267314c086383279e852e4560e27f425d127937bd62fb83f9",
        "warmup_time": 0
    },
    "benchmarks.DTWF.time_many_replicates": {
        "code": "class DTWF:\n    def time_many_replicates(self):\n        self._run_many_replicates()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.DTWF.time_many_replicates",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "8f8fa44794e1a510a8052653f41596e3e11adbcdc838d7ca59f99bdb491be41b",
        "warmup_time": 0
    },
    "benchmarks.Hudson.peakmem_human_chr22": {
        "code": "class Hudson:\n    def peakmem_human_chr22(self):\n        self._run_human_chr22()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.Hudson.peakmem_human_chr22",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "20ef616d263e941e12a3089b8e8dbfee94d982362fe475e40174ebc3506b102a"
    },
    "benchmarks.Hudson.peakmem_large_sample_size": {
        "code": "class Hudson:\n    def peakmem_large_sample_size(self):\n        self._run_large_sample_size()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.Hudson.peakmem_large_sample_size",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0b75d04c5ff9994c35ae62a490034e021485c38567b2699884e524931587881a"
    },
    "benchmarks.Hudson.peakmem_long_sequence_length": {
        "code": "class Hudson:\n    def peakmem_long_sequence_length(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.Hudson.peakmem_long_sequence_length",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "edd9dee8418f69b81347803203f176ff269220225a8939dc1c4bc1ab32289f94"
    },
    "benchmarks.Hudson.peakmem_long_sequence_length_gene_conversion": {
        "code": "class Hudson:\n    def peakmem_long_sequence_length_gene_conversion(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.Hudson.peakmem_long_sequence_length_gene_conversion",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "2236f20c5a4cc1e037abd099ce1f70d0dd2045a14914c96dcc48d0507f45e1da"
    },
    "benchmarks.Hudson.peakmem_many_replicates": {
        "code": "class Hudson:\n    def peakmem_many_replicates(self):\n        self._run_many_replicates()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "name": "benchmarks.Hudson.peakmem_many_replicates",
        "param_names": [],
        "params": [],
        "timeout": 120,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "b93569a722fa5396ed6631750fbdd02c7b47148d63973610f802eb69db85679e"
    },
    "benchmarks.Hudson.time_human_chr22": {
        "code": "class Hudson:\n    def time_human_chr22(self):\n        self._run_human_chr22()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.Hudson.time_human_chr22",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "e648432b5c065478e09802f16a5658d37b625c204e147517826817bd6b04acb1",
        "warmup_time": 0
    },
    "benchmarks.Hudson.time_large_sample_size": {
        "code": "class Hudson:\n    def time_large_sample_size(self):\n        self._run_large_sample_size()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.Hudson.time_large_sample_size",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "7bc273fa1975809170f8f4dd7776de03dd9993132a83866c1c135afe37e4d541",
        "warmup_time": 0
    },
    "benchmarks.Hudson.time_long_sequence_length": {
        "code": "class Hudson:\n    def time_long_sequence_length(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.Hudson.time_long_sequence_length",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "0b6c7c537bd986f4e9c36c5549b8e939955cbd49901f29827e3ce763790fb3b7",
        "warmup_time": 0
    },
    "benchmarks.Hudson.time_long_sequence_length_gene_conversion": {
        "code": "class Hudson:\n    def time_long_sequence_length_gene_conversion(self):\n        self._run_long_sequence_length()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.Hudson.time_long_sequence_length_gene_conversion",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "19005a2b4b33b284a84cc0ad033e2d2c646f2d264fd59a5a55e3c2246a05851b",
        "warmup_time": 0
    },
    "benchmarks.Hudson.time_many_replicates": {
        "code": "class Hudson:\n    def time_many_replicates(self):\n        self._run_many_replicates()\n\nclass LargeSimulationBenchmark:\n    def setup(self):\n        # Stuff that depends on the recomb_map_chr22 will fail\n        if stdpopsim_available:\n            species = stdpopsim.get_species(\"HomSap\")\n            genetic_map = species.get_genetic_map(\"HapMapII_GRCh37\")\n            self.recomb_map_chr22 = genetic_map.get_chromosome_map(\"chr22\")",
        "min_run_count": 1,
        "name": "benchmarks.Hudson.time_many_replicates",
        "number": 1,
        "param_names": [],
        "params": [],
        "processes": 1,
        "repeat": 1,
        "sample_time": 0.01,
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "c0f9f49074ade65f919a2db206a10f03ba6f5b53fa86dce2a6a32e96dd8a5067",
        "warmup_time": 0
    },
    "version": 2
}